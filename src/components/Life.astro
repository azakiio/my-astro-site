---
import { life } from "layouts/LifeTemplate.astro";

interface Props {
  data: Partial<typeof life>;
}
const { data } = Astro.props;
const path = Astro.url.pathname; // move to props

const keys = Object.keys(data);
const { length } = keys;

const options = {
  2: {
    grid: 3,
    pos: [
      { row: 1, col: 2 },
      { row: 3, col: 2 },
    ],
  },
  3: {
    grid: 3,
    pos: [
      { row: 1, col: 2 },
      { row: 3, col: 3 },
      { row: 3, col: 1 },
    ],
  },
  4: {
    grid: 3,
    pos: [
      { row: 1, col: 2 },
      { row: 2, col: 3 },
      { row: 3, col: 2 },
      { row: 2, col: 1 },
    ],
  },
  5: {
    grid: 5,
    pos: [
      { row: 1, col: 3 },
      { row: 3, col: 5 },
      { row: 5, col: 4 },
      { row: 5, col: 2 },
      { row: 3, col: 1 },
    ],
  },
  6: {
    grid: 5,
    pos: [
      { row: 1, col: 3 },
      { row: 2, col: 5 },
      { row: 4, col: 5 },
      { row: 5, col: 3 },
      { row: 4, col: 1 },
      { row: 2, col: 1 },
    ],
  },
  7: {
    grid: 7,
    pos: [
      { row: 1, col: 4 },
      { row: 3, col: 6 },
      { row: 5, col: 7 },
      { row: 7, col: 5 },
      { row: 7, col: 3 },
      { row: 5, col: 1 },
      { row: 3, col: 2 },
    ],
  },
  8: {
    grid: 7,
    pos: [
      { row: 1, col: 4 },
      { row: 2, col: 6 },
      { row: 4, col: 7 },
      { row: 6, col: 6 },
      { row: 7, col: 4 },
      { row: 6, col: 2 },
      { row: 4, col: 1 },
      { row: 2, col: 2 },
    ],
  },
};

const { grid, pos } = options[length];
---

<div class="flex flex-col items-center">
  <div
    class="grid justify-center justify-items-center items-center max-w-lg w-[100vmin] aspect-square p-4"
    style={{
      gridTemplateColumns: `repeat(${grid}, minmax(0, 1fr))`,
      gridTemplateRows: `repeat(${grid}, minmax(0, 1fr))`,
    }}
  >
    {
      pos.map(({ row, col }, i) => (
        <a
          href={`${path}/${keys[i]}`}
          class="p-4 rounded-2xl flex items-center justify-center uppercase font-bold flex-1 flex-shrink-0 border-2"
          style={{
            borderColor: `hsl(${(i / length) * 360} 100% 75%)`,
            gridArea: `${row}/${col}`,
          }}
        >
          {keys[i]}
        </a>
      ))
    }
    <a
      href={`${path}`}
      class="p-4 rounded-2xl flex items-center justify-center uppercase font-bold flex-1 flex-shrink-0 border-2"
      style={{
        borderColor: `hsl(0 100% 75%)`,
        gridArea: `${Math.ceil(grid / 2)}/${Math.ceil(grid / 2)}`,
      }}
    >
      {path}
    </a>
  </div>
</div>
